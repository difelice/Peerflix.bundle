################################################################################
import base64
import common
import os
import re
import peerflix
import time
import utils
import tmdbapi

################################################################################

RE_MAGNET = re.compile('\?magnet=(.+)$')

################################################################################

def NormalizeURL(url):
    return url

def MetadataObjectForURL(url):
	magnet = String.Unquote(RE_MAGNET.search(url).group(1))

	url = 'http://brunobasto.local:8888/'

	streams = [
		AudioStreamObject(
			codec = codec,
			channels = 2
		)
	]

	if magnet:
		return VideoClipObject(
			title = 'Test',
			summary = 'Summary',
			thumb = None,
			items = [
				MediaObject(
					parts = [
						PartObject(
							key = HTTPLiveStreamURL(Callback(PlayVideo, url = url)),
							streams = streams
						)
					],
					audio_channels = 2,
					optimized_for_streaming = True
				)
			]
		)

	Log.Error('MetadataObjectForURL failed. Aborting.')

	return Ex.LiveMediaNotStarted

################################################################################

def MediaObjectsForURL(url):
	magnet = String.Unquote(RE_MAGNET.search(url).group(1))

	url = 'http://brunobasto.local:8888/'

	streams = [
		AudioStreamObject(
			codec = codec,
			channels = 2
		)
	]

	if magnet:
		return [
			MediaObject(
				parts = [
					PartObject(
						key = HTTPLiveStreamURL(Callback(PlayVideo, url = url)),
						streams = streams
					)
				],
				audio_channels = 2,
				optimized_for_streaming = True
			)
		]

	raise Ex.LiveMediaNotStarted

###############################################################################

@indirect
def PlayVideo(url):
	Log.Info('Playing from Service ' + url)

	url = 'http://brunobasto.local:8888/'

	try:
		headers = HTTP.Request(url).headers
	except:
		raise Ex.MediaGeoblocked

	return IndirectResponse(
		VideoClipObject,
		key = HTTPLiveStreamURL(url = url)
	)

################################################################################

def GetHLSStreams(url):
	streams = []

	playList = HTTP.Request(url).content

	# Parse the m3u8 file to get:
	# - URL
	# - Resolution
	# - Bitrate
	for line in playList.splitlines():
		if "BANDWIDTH" in line:
			stream            = {}
			stream["bitrate"] = int(Regex('(?<=BANDWIDTH=)[0-9]+').search(line).group(0))

			if "RESOLUTION" in line:
				stream["resolution"] = int(Regex('(?<=RESOLUTION=)[0-9]+x[0-9]+').search(line).group(0).split("x")[1])
			else:
				stream["resolution"] = 0

		elif ".m3u8" in line:
			path = ''

			if not line.startswith("http"):
				path = url[ : url.rfind('/') + 1]

			stream["url"] = path + line

			streams.append(stream)

	sorted_streams = sorted(streams, key = lambda stream: stream["bitrate"], reverse = True)

	return sorted_streams

################################################################################